/* SimpleC.java */
/* Generated By:JavaCC: Do not edit this line. SimpleC.java */
  package simplec.parse;

  import static simplec.AST.*;
  import java.util.*;

  public class SimpleC implements SimpleCConstants {

    /** Main entry point. */
    public static void main(String args[]) throws ParseException {
      //TokenizeTest(); //- Lab 1
      //ParseTest();    //- Lab 2
      // Note: Lab 3 is called through the AST class,
      // So if you want, feel free to remove these methods
      // This other stuff is left for you if you want to test
      // using it
    }

    public static void TokenizeTest() throws ParseException {
      SimpleC parser = new SimpleC(System.in);
      parser.Input();
    }

    public static void ParseTest() {
      try {
        Unit.Program prog = new SimpleC(System.in).goal();
      } catch (Exception e) {
        System.out.println("Parsing related error");
      }
    }

/* Root production. */

// Note that we've omitted having a Goal class,
// and just go straight to producing a program,
// since they're pretty much the same thing
  static final public Unit.Program goal() throws ParseException {Unit.Program program;
    program = program();
    jj_consume_token(0);
{if ("" != null) return program;}
    throw new Error("Missing return statement in function");
  }

  static final public Unit.Program program() throws ParseException {List<FunctionOrVarList> fovList =
    new LinkedList<FunctionOrVarList>();
  FunctionOrVarList fov;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:
      case LONG:
      case LONG_STAR:
      case CHAR:
      case CHAR_STAR:
      case CHAR_STAR_STAR:
      case DOUBLE:
      case DOUBLE_STAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      fov = function_or_var();
fovList.add(fov);
    }
{if ("" != null) return new Unit.Program(ID("Main"), fovList);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionOrVarList function_or_var() throws ParseException {Token varType;
  Token id;
  FunctionOrVarList fov;
    varType = var_type();
    id = jj_consume_token(ID);
    fov = function_or_var_tail(id, varType);
{if ("" != null) return fov;}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionOrVarList function_or_var_tail(Token id, Token varType) throws ParseException {FunctionOrVarList fov;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      fov = function(id, varType);
{if ("" != null) return fov;}
      break;
      }
    case COMMA:
    case SEMICOLON:{
      fov = global_var(id, varType);
{if ("" != null) return fov;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public FunctionOrVarList.Function function(Token id, Token varType) throws ParseException {Statement.CompoundStatement cStmt;
  List<Value.Argument> argList;
    jj_consume_token(LPAREN);
    argList = arguments();
    jj_consume_token(RPAREN);
    cStmt = compound_statement();
{if ("" != null) return new FunctionOrVarList.Function(id, varType, argList, cStmt);}
    throw new Error("Missing return statement in function");
  }

  static final public List<Value.Argument> arguments() throws ParseException {List<Value.Argument> argList = new LinkedList<Value.Argument>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case LONG:
    case LONG_STAR:
    case CHAR:
    case CHAR_STAR:
    case CHAR_STAR_STAR:
    case DOUBLE:
    case DOUBLE_STAR:{
      argList = arg_list();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return argList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Value.Argument> arg_list() throws ParseException {Value.Argument arg;
  List<Value.Argument> argList = new LinkedList<Value.Argument>();
    arg = arg();
argList.add(arg);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      arg = arg();
argList.add(arg);
    }
{if ("" != null) return argList;}
    throw new Error("Missing return statement in function");
  }

  static final public Value.Argument arg() throws ParseException {Token id;
  Token varType;
    varType = var_type();
    id = jj_consume_token(ID);
{if ("" != null) return new Value.Argument(id, varType);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionOrVarList.VariableList global_var(Token lastVar, Token varType) throws ParseException {List<Value.Variable> vars = new LinkedList<Value.Variable>();
  vars.add(new Value.Variable(lastVar, varType));
  Token varName;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      varName = global_var_list();
vars.add(new Value.Variable(varName, varType));
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new FunctionOrVarList.VariableList(vars, true);}
    throw new Error("Missing return statement in function");
  }

  static final public Token global_var_list() throws ParseException {Token id;
    jj_consume_token(COMMA);
    id = jj_consume_token(ID);
{if ("" != null) return id;}
    throw new Error("Missing return statement in function");
  }

  static final public Token var_type() throws ParseException {Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:{
      id = jj_consume_token(CHAR);
{if ("" != null) return id;}
      break;
      }
    case CHAR_STAR:{
      id = jj_consume_token(CHAR_STAR);
{if ("" != null) return id;}
      break;
      }
    case CHAR_STAR_STAR:{
      id = jj_consume_token(CHAR_STAR_STAR);
{if ("" != null) return id;}
      break;
      }
    case DOUBLE:{
      id = jj_consume_token(DOUBLE);
{if ("" != null) return id;}
      break;
      }
    case DOUBLE_STAR:{
      id = jj_consume_token(DOUBLE_STAR);
{if ("" != null) return id;}
      break;
      }
    case LONG:{
      id = jj_consume_token(LONG);
{if ("" != null) return id;}
      break;
      }
    case LONG_STAR:{
      id = jj_consume_token(LONG_STAR);
{if ("" != null) return id;}
      break;
      }
    case VOID:{
      id = jj_consume_token(VOID);
{if ("" != null) return id;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement.AssignStatement assignment(Token varName) throws ParseException {Token id;
  Expression expr;
  Expression index;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      id = jj_consume_token(EQUAL);
      expr = expression();
{if ("" != null) return new Statement.AssignStatement(id, varName, expr);}
      break;
      }
    case LBRACK:{
      jj_consume_token(LBRACK);
      index = expression();
      jj_consume_token(RBRACK);
      id = jj_consume_token(EQUAL);
      expr = expression();
{if ("" != null) return new Statement.AssignStatement(id, varName, index, expr);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public List<Expression> call(Token idName) throws ParseException {List<Expression> args;
    jj_consume_token(LPAREN);
    args = call_arguments();
    jj_consume_token(RPAREN);
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Expression> call_arg_list() throws ParseException {List<Expression> args = new LinkedList<Expression>();
  Expression expr;
    expr = expression();
args.add(expr);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      expr = expression();
args.add(expr);
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Expression> call_arguments() throws ParseException {List<Expression> args = new LinkedList<Expression>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case MIN:
    case MUL:
    case AMP:
    case LPAREN:
    case ID:
    case C_CONST:
    case STR_CONST:
    case INT_CONST:
    case DOUBLE_CONST:{
      args = call_arg_list();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public Token eql_op() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALEQUAL:{
      op = jj_consume_token(EQUALEQUAL);
{if ("" != null) return op;}
      break;
      }
    case NOTEQUAL:{
      op = jj_consume_token(NOTEQUAL);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token cmp_op() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LANGLE:{
      op = jj_consume_token(LANGLE);
{if ("" != null) return op;}
      break;
      }
    case RANGLE:{
      op = jj_consume_token(RANGLE);
{if ("" != null) return op;}
      break;
      }
    case GREATEQUAL:{
      op = jj_consume_token(GREATEQUAL);
{if ("" != null) return op;}
      break;
      }
    case LESSEQUAL:{
      op = jj_consume_token(LESSEQUAL);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token add_op() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      op = jj_consume_token(ADD);
{if ("" != null) return op;}
      break;
      }
    case MIN:{
      op = jj_consume_token(MIN);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token mul_op() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      op = jj_consume_token(MUL);
{if ("" != null) return op;}
      break;
      }
    case DIV:{
      op = jj_consume_token(DIV);
{if ("" != null) return op;}
      break;
      }
    case MOD:{
      op = jj_consume_token(MOD);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token unary_op() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      op = jj_consume_token(MUL);
{if ("" != null) return op;}
      break;
      }
    case ADD:{
      op = jj_consume_token(ADD);
{if ("" != null) return op;}
      break;
      }
    case MIN:{
      op = jj_consume_token(MIN);
{if ("" != null) return op;}
      break;
      }
    case AMP:{
      op = jj_consume_token(AMP);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression expression() throws ParseException {Expression current;
    current = logical_or_expr();
{if ("" != null) return current;}
    throw new Error("Missing return statement in function");
  }

// Note that logical_or_expr is how you should correctly implement
// most of the other expr methods. The other methods have been
// left up to you, but are half implemented so that primary_expr()
// will work, and so ints, chars, etc will work out of the box
  static final public Expression logical_or_expr() throws ParseException {Expression lhs, rhs, current;
  Token op;
    lhs = logical_and_expr();
current = lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OROR:{
      op = jj_consume_token(OROR);
      rhs = logical_or_expr();
current = new Expression.Binary.Or(op, current, rhs);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
{if ("" != null) return current;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression logical_and_expr() throws ParseException {Expression lhs, rhs, current;
  Token op;
    lhs = equality_expr();
current = lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AMPAMP:{
      op = jj_consume_token(AMPAMP);
      rhs = logical_and_expr();
current = new Expression.Binary.And(op, current, rhs);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
{if ("" != null) return current;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression equality_expr() throws ParseException {Expression lhs, rhs, current;
  Token op;
    lhs = relational_expr();
current = lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALEQUAL:
    case NOTEQUAL:{
      op = eql_op();
      rhs = equality_expr();
current = new Expression.Binary.Equality(op, current, rhs);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
{if ("" != null) return current;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression relational_expr() throws ParseException {Expression lhs, rhs, current;
  Token op;
    lhs = additive_expr();
current = lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GREATEQUAL:
    case LESSEQUAL:
    case LANGLE:
    case RANGLE:{
      op = cmp_op();
      rhs = relational_expr();
current = new Expression.Binary.Relational(op, current, rhs);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
{if ("" != null) return current;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression additive_expr() throws ParseException {Expression lhs, rhs, current;
  Token op;
    lhs = multiplicative_expr();
current = lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case MIN:{
      op = add_op();
      rhs = additive_expr();
current = new Expression.Binary.Additive(op, current, rhs);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return current;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression multiplicative_expr() throws ParseException {Expression lhs, rhs, current;
  Token op;
    lhs = unary_expr();
current = lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:
    case DIV:
    case MOD:{
      op = mul_op();
      rhs = multiplicative_expr();
current = new Expression.Binary.Multiplicative(op, current, rhs);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
{if ("" != null) return current;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression unary_expr() throws ParseException {Expression lhs;
  Token op;
  Expression unary = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case ID:
    case C_CONST:
    case STR_CONST:
    case INT_CONST:
    case DOUBLE_CONST:{
      lhs = primary_expr();
{if ("" != null) return lhs;}
      break;
      }
    case ADD:
    case MIN:
    case MUL:
    case AMP:{
      op = unary_op();
      lhs = unary_expr();
switch(op.image) {
        case "&": unary = new Expression.Unary.Ref(op, lhs); break;
        case "*": unary = new Expression.Unary.Deref(op, lhs); break;
        case "+": unary = new Expression.Unary.Positive(op, lhs); break;
        case "-": unary = new Expression.Unary.Negative(op, lhs); break;
      }
      {if ("" != null) return unary;}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression primary_expr() throws ParseException {Token id;
  Expression expr = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STR_CONST:{
      id = jj_consume_token(STR_CONST);
{if ("" != null) return new Expression.Str(id, id.image);}
      break;
      }
    case C_CONST:{
      id = jj_consume_token(C_CONST);
{if ("" != null) return new Expression.Char(id, id.image);}
      break;
      }
    case ID:{
      id = jj_consume_token(ID);
      expr = primary_expr_tail(id);
{if ("" != null) return expr;}
      break;
      }
    case INT_CONST:{
      id = jj_consume_token(INT_CONST);
{if ("" != null) return new Expression.Int(id, id.image);}
      break;
      }
    case DOUBLE_CONST:{
      id = jj_consume_token(DOUBLE_CONST);
{if ("" != null) return new Expression.Double(id, Double.parseDouble(id.image));}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression primary_expr_tail(Token idName) throws ParseException {Expression expr;
  List<Expression> args;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACK:{
      jj_consume_token(LBRACK);
      expr = expression();
      jj_consume_token(RBRACK);
{if ("" != null) return new Expression.Array(idName, expr);}
      break;
      }
    case LPAREN:{
      args = call(idName);
{if ("" != null) return new Expression.Call(idName, args);}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
{if ("" != null) return new Expression.ID(idName);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement.CompoundStatement compound_statement() throws ParseException {List<Statement> stmtList;
    jj_consume_token(LCURLY);
    stmtList = statement_list_opt();
    jj_consume_token(RCURLY);
{if ("" != null) return new Statement.CompoundStatement(ID("Compound"), stmtList);}
    throw new Error("Missing return statement in function");
  }

  static final public List<Statement> statement_list_opt() throws ParseException {List<Statement> stmtList = new LinkedList<Statement>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case LONG:
    case LONG_STAR:
    case CHAR:
    case CHAR_STAR:
    case CHAR_STAR_STAR:
    case DOUBLE:
    case DOUBLE_STAR:
    case IF:
    case DO:
    case WHILE:
    case FOR:
    case CONTINUE:
    case BREAK:
    case RETURN:
    case LCURLY:
    case ID:{
      stmtList = statement_list();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
{if ("" != null) return stmtList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Statement> statement_list() throws ParseException {List<Statement> stmtList = new LinkedList<Statement>();
  Statement stmt;
    label_5:
    while (true) {
      stmt = statement();
stmtList.add(stmt);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:
      case LONG:
      case LONG_STAR:
      case CHAR:
      case CHAR_STAR:
      case CHAR_STAR_STAR:
      case DOUBLE:
      case DOUBLE_STAR:
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case LCURLY:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_5;
      }
    }
{if ("" != null) return stmtList;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement.VariableDecls local_var() throws ParseException {List<Value.Variable> vars;
  Token type;
    type = var_type();
    vars = local_var_list(type);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new Statement.VariableDecls(ID("VariableDecls"), vars);}
    throw new Error("Missing return statement in function");
  }

  static final public List<Value.Variable> local_var_list(Token varType) throws ParseException {List<Value.Variable> vars = new LinkedList<Value.Variable>();
  Token id;
    id = jj_consume_token(ID);
vars.add(new Value.Variable(id, varType));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(ID);
vars.add(new Value.Variable(id, varType));
    }
{if ("" != null) return vars;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement statement() throws ParseException {Statement stmt;
  Token varName;
  Token varName2;
  Statement.AssignStatement init = null;
  Expression cond = null;
  Statement.AssignStatement update = null;
  Statement body = null;
  Statement elseStmt = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCURLY:{
      stmt = compound_statement();
{if ("" != null) return stmt;}
      break;
      }
    case VOID:
    case LONG:
    case LONG_STAR:
    case CHAR:
    case CHAR_STAR:
    case CHAR_STAR_STAR:
    case DOUBLE:
    case DOUBLE_STAR:{
      stmt = local_var();
{if ("" != null) return stmt;}
      break;
      }
    case ID:{
      varName = jj_consume_token(ID);
      stmt = statement_tail(varName);
{if ("" != null) return stmt;}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      cond = expression();
      jj_consume_token(RPAREN);
      body = statement();
      elseStmt = else_optional();
{if ("" != null) return new Statement.IfStatement(ID("If"), cond, body, elseStmt);}
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      cond = expression();
      jj_consume_token(RPAREN);
      body = statement();
{if ("" != null) return new Statement.WhileStatement(ID("While"), cond, body);}
      break;
      }
    case DO:{
      jj_consume_token(DO);
      body = statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      cond = expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Statement.DoWhileStatement(ID("DoWhile"), cond, body);}
      break;
      }
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      varName = jj_consume_token(ID);
      init = assignment(varName);
      jj_consume_token(SEMICOLON);
      cond = expression();
      jj_consume_token(SEMICOLON);
      varName2 = jj_consume_token(ID);
      update = assignment(varName2);
      jj_consume_token(RPAREN);
      body = statement();
{if ("" != null) return new Statement.ForStatement(ID("For"), init, cond, update, body);}
      break;
      }
    case CONTINUE:
    case BREAK:
    case RETURN:{
      stmt = jump_statement();
{if ("" != null) return stmt;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement statement_tail(Token varName) throws ParseException {Statement stmt;
  Expression expr;
  List<Expression> args;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:
    case LBRACK:{
      stmt = assignment(varName);
      jj_consume_token(SEMICOLON);
{if ("" != null) return stmt;}
      break;
      }
    case LPAREN:{
      args = call(varName);
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Statement.Call(varName, args);}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement else_optional() throws ParseException {Statement stmt = null;
  Statement elseStmt = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      stmt = statement();
elseStmt = stmt;
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
{if ("" != null) return elseStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement jump_statement() throws ParseException {Token jump;
  Expression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONTINUE:{
      jump = jj_consume_token(CONTINUE);
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Statement.ContinueStatement(ID("Continue"));}
      break;
      }
    case BREAK:{
      jump = jj_consume_token(BREAK);
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Statement.BreakStatement(ID("Break"));}
      break;
      }
    case RETURN:{
      jump = jj_consume_token(RETURN);
      expr = return_val_opt();
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Statement.ReturnStatement(ID("Return"), expr);}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression return_val_opt() throws ParseException {Expression expr = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case MIN:
    case MUL:
    case AMP:
    case LPAREN:
    case ID:
    case C_CONST:
    case STR_CONST:
    case INT_CONST:
    case DOUBLE_CONST:{
      expr = expression();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

/* ******************************************************************

      Below this is from lab 1, remove if you want (doesn't matter)

   ****************************************************************** */
  static final public 
void Input() throws ParseException {int count;
    count = anytoken();
    jj_consume_token(0);
System.out.println("Total Tokens: " + count);
  }

  static final public int anytoken() throws ParseException {Token t;
  int count=0;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        t = jj_consume_token(VOID);
System.out.println("(VOID, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case LONG:{
        t = jj_consume_token(LONG);
System.out.println("(LONE, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case LONG_STAR:{
        t = jj_consume_token(LONG_STAR);
System.out.println("(LONG_STAR, \u005c""+t.image+"\u005c")" );    count++;
        break;
        }
      case CHAR_STAR:{
        t = jj_consume_token(CHAR_STAR);
System.out.println("(CHAR_STAR, \u005c""+t.image+"\u005c")" );    count++;
        break;
        }
      case CHAR_STAR_STAR:{
        t = jj_consume_token(CHAR_STAR_STAR);
System.out.println("(CHAR_STAR_STAR, \u005c""+t.image+"\u005c")" ); count++;
        break;
        }
      case DOUBLE:{
        t = jj_consume_token(DOUBLE);
System.out.println("(DOUBLE, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case DOUBLE_STAR:{
        t = jj_consume_token(DOUBLE_STAR);
System.out.println("(DOUBLE_STAR, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case IF:{
        t = jj_consume_token(IF);
System.out.println("(IF, \u005c""+t.image+"\u005c")" );         count++;
        break;
        }
      case ELSE:{
        t = jj_consume_token(ELSE);
System.out.println("(ELSE, \u005c""+t.image+"\u005c")" );         count++;
        break;
        }
      case DO:{
        t = jj_consume_token(DO);
System.out.println("(DO, \u005c""+t.image+"\u005c")" );         count++;
        break;
        }
      case WHILE:{
        t = jj_consume_token(WHILE);
System.out.println("(WHILE, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case FOR:{
        t = jj_consume_token(FOR);
System.out.println("(FOR, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case CONTINUE:{
        t = jj_consume_token(CONTINUE);
System.out.println("(CONTINUE, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case BREAK:{
        t = jj_consume_token(BREAK);
System.out.println("(BREAK, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case RETURN:{
        t = jj_consume_token(RETURN);
System.out.println("(RETURN, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case ADD:{
        t = jj_consume_token(ADD);
System.out.println("(ADD, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case MIN:{
        t = jj_consume_token(MIN);
System.out.println("(MIN, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case MUL:{
        t = jj_consume_token(MUL);
System.out.println("(MUL, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case DIV:{
        t = jj_consume_token(DIV);
System.out.println("(DIV, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case MOD:{
        t = jj_consume_token(MOD);
System.out.println("(MOD, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case EQUAL:{
        t = jj_consume_token(EQUAL);
System.out.println("(EQUAL, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case AMP:{
        t = jj_consume_token(AMP);
System.out.println("(AMP, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case AMPAMP:{
        t = jj_consume_token(AMPAMP);
System.out.println("(2AMP, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case OROR:{
        t = jj_consume_token(OROR);
System.out.println("(2BAR, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case EQUALEQUAL:{
        t = jj_consume_token(EQUALEQUAL);
System.out.println("(2EQUAL, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case NOTEQUAL:{
        t = jj_consume_token(NOTEQUAL);
System.out.println("(NOTEQUAL, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case LESSEQUAL:{
        t = jj_consume_token(LESSEQUAL);
System.out.println("(LESSEQUAL, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case GREATEQUAL:{
        t = jj_consume_token(GREATEQUAL);
System.out.println("(GREATEQUAL, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case COMMA:{
        t = jj_consume_token(COMMA);
System.out.println("(COMMA, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case SEMICOLON:{
        t = jj_consume_token(SEMICOLON);
System.out.println("(SEMICOLON, \u005c""+t.image+"\u005c")" );       count++;
        break;
        }
      case LPAREN:{
        t = jj_consume_token(LPAREN);
System.out.println("(LPAREN, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case RPAREN:{
        t = jj_consume_token(RPAREN);
System.out.println("(RPAREN, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case LBRACK:{
        t = jj_consume_token(LBRACK);
System.out.println("(LBRACK, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case RBRACK:{
        t = jj_consume_token(RBRACK);
System.out.println("(RBRACK, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case LCURLY:{
        t = jj_consume_token(LCURLY);
System.out.println("(LCURLY, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case RCURLY:{
        t = jj_consume_token(RCURLY);
System.out.println("(RCURLY, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case LANGLE:{
        t = jj_consume_token(LANGLE);
System.out.println("(LANGLE, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case RANGLE:{
        t = jj_consume_token(RANGLE);
System.out.println("(RANGLE, \u005c""+t.image+"\u005c")" );     count++;
        break;
        }
      case ID:{
        t = jj_consume_token(ID);
System.out.println("(ID, \u005c""+t.image+"\u005c")" );         count++;
        break;
        }
      case C_CONST:{
        t = jj_consume_token(C_CONST);
System.out.println("(C_CONST, \u005c""+t.image+"\u005c")" );    count++;
        break;
        }
      case DOUBLE_CONST:{
        t = jj_consume_token(DOUBLE_CONST);
System.out.println("(DOUBLE_CONST, \u005c""+t.image+"\u005c")" );  count++;
        break;
        }
      case STR_CONST:{
        t = jj_consume_token(STR_CONST);
System.out.println("(STR_CONST, \u005c""+t.image+"\u005c")" );  count++;
        break;
        }
      case INT_CONST:{
        t = jj_consume_token(INT_CONST);
System.out.println("(INT_CONST, \u005c""+t.image+"\u005c")" );  count++;
        break;
        }
      case PRINT:{
        t = jj_consume_token(PRINT);
System.out.println("(PRINT, \u005c""+t.image+"\u005c")" );      count++;
        break;
        }
      case DEC:{
        t = jj_consume_token(DEC);
System.out.println("(DEC, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case OCT:{
        t = jj_consume_token(OCT);
System.out.println("(OCT, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case HEX:{
        t = jj_consume_token(HEX);
System.out.println("(HEX, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case LET:{
        t = jj_consume_token(LET);
System.out.println("(LET, \u005c""+t.image+"\u005c")" );        count++;
        break;
        }
      case OTHER:{
        t = jj_consume_token(OTHER);
System.out.println("(OTHER, \u005c""+t.image+"\u005c")" );      count++;
        break;
        }
      case PRAGMA:{
        t = jj_consume_token(PRAGMA);

        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRAGMA:
      case VOID:
      case LONG:
      case LONG_STAR:
      case CHAR_STAR:
      case CHAR_STAR_STAR:
      case DOUBLE:
      case DOUBLE_STAR:
      case IF:
      case ELSE:
      case DO:
      case WHILE:
      case FOR:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case ADD:
      case MIN:
      case MUL:
      case DIV:
      case MOD:
      case EQUAL:
      case AMP:
      case AMPAMP:
      case OROR:
      case EQUALEQUAL:
      case NOTEQUAL:
      case GREATEQUAL:
      case LESSEQUAL:
      case COMMA:
      case SEMICOLON:
      case LPAREN:
      case RPAREN:
      case LBRACK:
      case RBRACK:
      case LCURLY:
      case RCURLY:
      case LANGLE:
      case RANGLE:
      case ID:
      case C_CONST:
      case STR_CONST:
      case INT_CONST:
      case DOUBLE_CONST:
      case DEC:
      case PRINT:
      case OCT:
      case HEX:
      case LET:
      case OTHER:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_7;
      }
    }
{if ("" != null) return count;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3fc00,0x0,0x3fc00,0x0,0x0,0x3fc00,0x80000000,0x0,0x1c000000,0x0,0x0,0xc000000,0x70000000,0x1c000000,0x0,0x0,0x0,0x0,0xc000000,0x70000000,0x1c000000,0x0,0x0,0x3f7fc00,0x3f7fc00,0x0,0x3f7fc00,0x80000000,0x80000,0x3800000,0x1c000000,0xffffde00,0xffffde00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x380,0x0,0x80,0x80,0x0,0x800,0x80,0x3e0201,0x18,0x18060,0x0,0x0,0x1,0x4,0x2,0x18,0x18060,0x0,0x0,0x3e0201,0x3e0200,0xa00,0x22000,0x22000,0x80,0x22000,0xa00,0x0,0x0,0x3e0201,0xfffffff,0xfffffff,};
   }

  /** Constructor with InputStream. */
  public SimpleC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleC(SimpleCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  }
